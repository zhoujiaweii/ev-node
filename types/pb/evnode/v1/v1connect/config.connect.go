// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: evnode/v1/config.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/evstack/ev-node/types/pb/evnode/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "evnode.v1.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceGetNamespaceProcedure is the fully-qualified name of the ConfigService's
	// GetNamespace RPC.
	ConfigServiceGetNamespaceProcedure = "/evnode.v1.ConfigService/GetNamespace"
	// ConfigServiceGetSignerInfoProcedure is the fully-qualified name of the ConfigService's
	// GetSignerInfo RPC.
	ConfigServiceGetSignerInfoProcedure = "/evnode.v1.ConfigService/GetSignerInfo"
)

// ConfigServiceClient is a client for the evnode.v1.ConfigService service.
type ConfigServiceClient interface {
	// GetNamespace returns the namespace for this network
	GetNamespace(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNamespaceResponse], error)
	// GetSignerInfo returns information about the signer
	GetSignerInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSignerInfoResponse], error)
}

// NewConfigServiceClient constructs a client for the evnode.v1.ConfigService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configServiceMethods := v1.File_evnode_v1_config_proto.Services().ByName("ConfigService").Methods()
	return &configServiceClient{
		getNamespace: connect.NewClient[emptypb.Empty, v1.GetNamespaceResponse](
			httpClient,
			baseURL+ConfigServiceGetNamespaceProcedure,
			connect.WithSchema(configServiceMethods.ByName("GetNamespace")),
			connect.WithClientOptions(opts...),
		),
		getSignerInfo: connect.NewClient[emptypb.Empty, v1.GetSignerInfoResponse](
			httpClient,
			baseURL+ConfigServiceGetSignerInfoProcedure,
			connect.WithSchema(configServiceMethods.ByName("GetSignerInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	getNamespace  *connect.Client[emptypb.Empty, v1.GetNamespaceResponse]
	getSignerInfo *connect.Client[emptypb.Empty, v1.GetSignerInfoResponse]
}

// GetNamespace calls evnode.v1.ConfigService.GetNamespace.
func (c *configServiceClient) GetNamespace(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNamespaceResponse], error) {
	return c.getNamespace.CallUnary(ctx, req)
}

// GetSignerInfo calls evnode.v1.ConfigService.GetSignerInfo.
func (c *configServiceClient) GetSignerInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSignerInfoResponse], error) {
	return c.getSignerInfo.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the evnode.v1.ConfigService service.
type ConfigServiceHandler interface {
	// GetNamespace returns the namespace for this network
	GetNamespace(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNamespaceResponse], error)
	// GetSignerInfo returns information about the signer
	GetSignerInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSignerInfoResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configServiceMethods := v1.File_evnode_v1_config_proto.Services().ByName("ConfigService").Methods()
	configServiceGetNamespaceHandler := connect.NewUnaryHandler(
		ConfigServiceGetNamespaceProcedure,
		svc.GetNamespace,
		connect.WithSchema(configServiceMethods.ByName("GetNamespace")),
		connect.WithHandlerOptions(opts...),
	)
	configServiceGetSignerInfoHandler := connect.NewUnaryHandler(
		ConfigServiceGetSignerInfoProcedure,
		svc.GetSignerInfo,
		connect.WithSchema(configServiceMethods.ByName("GetSignerInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/evnode.v1.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceGetNamespaceProcedure:
			configServiceGetNamespaceHandler.ServeHTTP(w, r)
		case ConfigServiceGetSignerInfoProcedure:
			configServiceGetSignerInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) GetNamespace(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evnode.v1.ConfigService.GetNamespace is not implemented"))
}

func (UnimplementedConfigServiceHandler) GetSignerInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSignerInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evnode.v1.ConfigService.GetSignerInfo is not implemented"))
}
